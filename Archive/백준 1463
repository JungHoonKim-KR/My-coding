import java.io.*;
import java.io.IOException;
import java.util.*;

public class Main {

static int num;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        num = Integer.parseInt(br.readLine());
        bw.write(String.valueOf(recur(0,0)));
        bw.flush();
        bw.close();


    }
    public static int recur(int n,int c){
        if(n==1){
           return c;

        }
        int result1=num;
        int result2=num;
        int result3=recur(n-1,c+1);


        if(n%3==0) {
            result1=recur(n/3,c+1);
        }
        else if(n%2==0){
            result2=recur(n/2,c+1);
        }

    return Math.min(result3,Math.min(result1,result2));
    }

}
일단 세가지 방법을 계산한 후에 min으로 결정하려고 했으나 시간초과가 발생했다.
백준은 문제가 다소 쉬우면 꼭 시간으로 태클을 건다....사실 그리 쉽지도 않았다

   if(i%3==0){
                dp[i]=Math.min(dp[i/3]+1,dp[i]);
            }
            else if(i%2==0){
                dp[i]=Math.min(dp[i/2]+1,dp[i]);
            }
            else if((i-1)%3==0
                    ....
            else if((i-1)%2==0)
            ....
        }


이런식으로 우선순위를 둬서 게산하면 된다고 생각했지만 숫자 마다 적용되는 우선순위가 달라 도저히 풀 수 없었다.
Top down 방식은 딱히 와닫지 않아서
        int num = Integer.parseInt(br.readLine());
        int dp[]=new int [num+1];
        dp[0]=0;
        dp[1]=0;
        for(int i=2;i<num;i++){
            dp[i]=dp[i-1]+1;
            if(i%3==0){
                dp[i]=Math.min(dp[i/3]+1,dp[i]);
            }
            if(i%2==0){
                dp[i]=Math.min(dp[i/2]+1,dp[i]);
            }
        }
        bw.write(String.valueOf(dp[num]));
        bw.flush();
        bw.close();
이렇게 했다.
dp[i]는 현재 계산 dp[i-1] , dp[i/3], dp[i/2]는 이전 계산이므로 count+1을 해준다.
